/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
       if (head == null || k == 1) {
            return head;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;
        
        while (prev != null) {
            prev = reverseNextK(prev, k);
        }
        
        return dummy.next;
    }
    
    private ListNode reverseNextK(ListNode head, int k) {
        ListNode curr = head;
        
        for (int i = 0; i < k; i++) {
            curr = curr.next;
            if (curr == null) {
                return null; 
            }
        }
        
        ListNode prev = head.next;
        ListNode currNext = prev.next;
        
        for (int i = 0; i < k - 1; i++) {
            ListNode nextNode = currNext.next;
            currNext.next = prev;
            prev = currNext;
            currNext = nextNode;
        }
        
        ListNode newHead = head.next;
        head.next.next = currNext;
        head.next = prev;
        
        return newHead;
    }
}