class FoodRatings {
    Map<String, Integer> foodRatingMap;
    Map<String, String> foodCuisineMap;
    Map<String, TreeSet<Pair>> cuisineFoodMap;

    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        foodRatingMap = new HashMap<>();
        foodCuisineMap = new HashMap<>();
        cuisineFoodMap = new HashMap<>();

        for (int i = 0; i < foods.length; i++) {
            foodRatingMap.put(foods[i], ratings[i]);
            foodCuisineMap.put(foods[i], cuisines[i]);

            cuisineFoodMap.putIfAbsent(cuisines[i], new TreeSet<>());
            cuisineFoodMap.get(cuisines[i]).add(new Pair(-ratings[i], foods[i]));
        }
    }

    public void changeRating(String food, int newRating) {
        String cuisine = foodCuisineMap.get(food);
        int oldRating = foodRatingMap.get(food);

        cuisineFoodMap.get(cuisine).remove(new Pair(-oldRating, food));
        cuisineFoodMap.get(cuisine).add(new Pair(-newRating, food));

        foodRatingMap.put(food, newRating);
    }

    public String highestRated(String cuisine) {
        TreeSet<Pair> foods = cuisineFoodMap.get(cuisine);

        if (foods != null && !foods.isEmpty()) {
            return foods.first().second;
        }
        return null;
    }

    private static class Pair implements Comparable<Pair> {
        int first;
        String second;

        Pair(int first, String second) {
            this.first = first;
            this.second = second;
        }

        @Override
        public int compareTo(Pair other) {
            if (this.first != other.first) {
                return Integer.compare(this.first, other.first);
            } else {
                return this.second.compareTo(other.second);
            }
        }
    }
}

/**
 * Your FoodRatings object will be instantiated and called as such:
 * FoodRatings obj = new FoodRatings(foods, cuisines, ratings);
 * obj.changeRating(food,newRating);
 * String param_2 = obj.highestRated(cuisine);
 */