class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        Map<Integer, List<Integer>> graph = buildGraph(edges);

        boolean[] visited = new boolean[n];

        return dfs(graph, visited, source, destination);
    }

    private Map<Integer, List<Integer>> buildGraph(int[][] edges) {
        Map<Integer, List<Integer>> graph = new HashMap<>();

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];

            graph.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            graph.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        return graph;
    }

    private boolean dfs(Map<Integer, List<Integer>> graph, boolean[] visited, int current, int destination) {
        visited[current] = true;

        if (current == destination) {
            return true;
        }

        if (graph.containsKey(current)) {
            for (int neighbor : graph.get(current)) {
                if (!visited[neighbor]) {
                    if (dfs(graph, visited, neighbor, destination)) {
                        return true; 
                    }
                }
            }
        }

        return false;
    }
}