/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    String smallestString = "~"; 
    
    public String smallestFromLeaf(TreeNode root) {
        if (root == null) return ""; 
        dfs(root, new StringBuilder());
        return smallestString;
    }
    
    private void dfs(TreeNode node, StringBuilder sb) {
        sb.append((char)('a' + node.val)); 
        
        if (node.left == null && node.right == null) { 
            String currentString = sb.reverse().toString(); 
            if (currentString.compareTo(smallestString) < 0) { 
                smallestString = currentString;
            }
            sb.reverse(); 
        } else { 
            if (node.left != null) dfs(node.left, sb); 
            if (node.right != null) dfs(node.right, sb);
        }
        
        sb.deleteCharAt(sb.length() - 1); 
    }
}