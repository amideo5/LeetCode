class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;

        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            System.arraycopy(matrix[i], 0, dp[i], 0, n);
        }

        for (int row = 1; row < n; row++) {
            for (int col = 0; col < n; col++) {
                int left = (col > 0) ? dp[row - 1][col - 1] : Integer.MAX_VALUE;
                int middle = dp[row - 1][col];
                int right = (col < n - 1) ? dp[row - 1][col + 1] : Integer.MAX_VALUE;

                dp[row][col] += Math.min(left, Math.min(middle, right));
            }
        }

        int minSum = Integer.MAX_VALUE;
        for (int col = 0; col < n; col++) {
            minSum = Math.min(minSum, dp[n - 1][col]);
        }

        return minSum;
    }
}