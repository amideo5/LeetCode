class Solution {
    public int getMaximumGold(int[][] grid) {
        int maxGold = 0;
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] != 0) {
                    int currentGold = backtrack(grid, i, j, visited);
                    maxGold = Math.max(maxGold, currentGold);
                }
            }
        }

        return maxGold;
    }

    private int backtrack(int[][] grid, int i, int j, boolean[][] visited) {
        int m = grid.length;
        int n = grid[0].length;

        if (i < 0 || i >= m || j < 0 || j >= n || grid[i][j] == 0 || visited[i][j]) {
            return 0;
        }

        visited[i][j] = true;
        int currentGold = grid[i][j];
        int maxGold = 0;

        maxGold = Math.max(maxGold, currentGold + backtrack(grid, i + 1, j, visited));
        maxGold = Math.max(maxGold, currentGold + backtrack(grid, i - 1, j, visited));
        maxGold = Math.max(maxGold, currentGold + backtrack(grid, i, j + 1, visited));
        maxGold = Math.max(maxGold, currentGold + backtrack(grid, i, j - 1, visited));

        visited[i][j] = false; // backtrack

        return maxGold;
    }
}